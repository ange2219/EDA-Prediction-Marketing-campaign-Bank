import streamlit as st 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
import plotly.express as px
st.logo(image = 'images/banque_logo1.png')
st.sidebar.image('images/banque_logo.jpg', caption = "YOUR BUSINESS PARTNER")
st.markdown("""
## üîç Analyse exploratoire (EDA)

Bienvenue dans la section EDA !  
Ici, vous pouvez explorer les donn√©es brutes pour en d√©couvrir la structure, les tendances, les anomalies, et les insights essentiels.

---

### üß∞ Outils utilis√©s :
- Statistiques descriptives
- Visualisations interactives (matplotlib/seaborn)
- Analyse des distributions, corr√©lations et valeurs manquantes

> üéØ L‚Äôobjectif est de mieux **comprendre** les donn√©es avant d‚Äôentra√Æner un mod√®le pr√©dictif.
---
""")
st.markdown("""### Filtrez le dataset pour plus de lisibilit√©üëá""")

@st.cache_data
def load_data():
    df = pd.read_csv("data/new_bank_dataset.csv")
    return df

df = load_data()


#------------Preprocessing----------------------

df['class'] = df['class'].replace({'engage': 'Engag√©',
                                   'non interesse': 'Non interess√©',
                                   'potentiel': 'Potentiel'})
df = df.rename({'class':'Classe'})

def imput_outliers(variable, data):
    iqr_variable = data[variable].quantile(0.75) - data[variable].quantile(0.25)
    lower_limit = data[variable].quantile(0.25) - 1.5 * iqr_variable
    upper_limit = data[variable].quantile(0.75) + 1.5 * iqr_variable
    data.loc[data[variable] > upper_limit, variable] = upper_limit
    data.loc[data[variable] < lower_limit, variable] = lower_limit
    return data[(data[variable] < lower_limit) | (data[variable] > upper_limit)]

imput_outliers('duration', df)
imput_outliers('pdays', df)
imput_outliers('campaign', df)
imput_outliers('previous', df)
#-------------------------------Cases √† cocher ------------------------------
st.sidebar.markdown("---")

st.sidebar.header('Affichez les graphiques')


show_hist = st.sidebar.checkbox('Histogramme', value = True)

show_cross = st.sidebar.checkbox('Carte de chaleur des classes par metier', value = True)

show_line = st.sidebar.checkbox('Evolution du solde bancaire moyen par metier', value = True)

show_bar = st.sidebar.checkbox('Composition des classes selon le mois', value = True)

def Home():
    with st.expander('Tabulaire'):
        showData = st.multiselect('Filtrez:', df.columns, default=[])
        st.write(df[showData])

Home()

# -------------------- AFFICHAGE DES GRAPHIQUES --------------------
class_color ={'Engag√©':"#0026FF", 'Potentiel':"#A5CDEE", 'Non interess√©':"#00B8C4"}

if show_hist:  
    col1, col2, col3 = st.columns(3)
    col4, col5, col6 = st.columns(3)
    with col1:
        st.subheader("üìä R√©partition des classes (Barres)")

        counts = df['class'].value_counts().reset_index()
        counts.columns = ['class', 'count']

        # Barplot avec plotly.express
        fig = px.bar(counts, x='class', y='count',
                    title="R√©partition des classes dans la variable cible",
                    color='class', 
                    color_discrete_map=class_color)  

    
        fig.update_layout(template='plotly_dark')  

        # Afficher dans Streamlit
        st.plotly_chart(fig)


    with col2:  
        st.subheader("üìä Dur√©e moyenne par classe")

        # Calcul de la moyenne
        grouped = df.groupby('class')['duration'].mean().reset_index()

        # Barplot avec Plotly
        fig = px.bar(grouped, x='class', y='duration',
                    title="Dur√©e moyenne par classe",
                    color='class',
                    text='duration',  
                    color_discrete_map=class_color)  

        
        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        fig.update_layout(template='plotly_dark', yaxis_title="Dur√©e moyenne", xaxis_title="Classe")

        # Affichage
        st.plotly_chart(fig)


    with col3:
        st.subheader("üìä Nombre d'appel par classe")

        # Calcul de la moyenne
        grouped = df.groupby('class')['pdays'].sum().reset_index()

        # Barplot avec Plotly
        fig = px.bar(grouped, x='class', y='pdays',
                    title="Nombre d'appel moyenne par classe",
                    color='class',
                    text='pdays',  
                    color_discrete_map=class_color)  

        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        fig.update_layout(template='plotly_dark', yaxis_title="Nombre d'appel", xaxis_title="Classe")

        # Affichage
        st.plotly_chart(fig)


    with col4:
        st.subheader("üìä Solde bancaire moyen par classe")

        # Calcul de la moyenne
        grouped = df.groupby('class')['balance'].mean().reset_index()

        # Barplot avec Plotly
        fig = px.bar(grouped, x='class', y='balance',
                    title="Salaire moyen par classe",
                    color='class',
                    text='balance', 
                    color_discrete_map=class_color)  

        
        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        fig.update_layout(template='plotly_dark', yaxis_title="Salaire moyen", xaxis_title="Classe")

        # Affichage
        st.plotly_chart(fig)

    with col5:  
        st.subheader("üìä Nombre de campagne par classe")

        # Calcul de la moyenne
        grouped = df.groupby('class')['campaign'].sum().reset_index()

        # Barplot avec Plotly
        fig = px.bar(grouped, x='class', y='campaign',
                    title="Nombre de campagne par classe",
                    color='class',
                    text='campaign',  
                    color_discrete_map=class_color)  

        
        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        fig.update_layout(template='plotly_dark', yaxis_title="Nombre de campagne", xaxis_title="Classe")

        
        st.plotly_chart(fig)

    with col6:  
        st.subheader("üìä Nombre de jours precedent par classe")

        # Calcul de la moyenne
        grouped = df.groupby('class')['previous'].sum().reset_index()

        # Barplot avec Plotly
        fig = px.bar(grouped, x='class', y='previous',
                    title="Nombre de jours precedent par classe",
                    color='class',
                    text='previous',  
                    color_discrete_map=class_color)  

       
        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        fig.update_layout(template='plotly_dark', yaxis_title="Nombre de jour", xaxis_title="Classe")

        # Affichage
        st.plotly_chart(fig)

if show_cross:
    st.subheader("üîç R√©partition de la variable cible 'class' selon les m√©tiers (job)")

    # Cr√©ation du tableau crois√©
    crosstab = pd.crosstab(df['job'], df['class'], normalize='index') * 100

    
    job_order = df['job'].value_counts().index
    crosstab = crosstab.loc[job_order]

    # Affichage de la heatmap
    fig, ax = plt.subplots(figsize=(12, len(crosstab) * 0.5))  
    sns.heatmap(crosstab, annot=True, fmt=".1f", cmap="Blues", linewidths=.5, ax=ax)

    plt.title("R√©partition (%) des classes pour chaque job")
    plt.xlabel("Classe cible")
    plt.ylabel("Job")
    st.pyplot(fig)
col7, col8 = st.columns(2)
if show_line:
    with col7:
        st.subheader("üìä Solde bancaire moyen par m√©tier")

        # Calculer la moyenne du solde par m√©tier
        job_balance = df.groupby("job")["balance"].mean().sort_values(ascending=True).reset_index()

        # Tracer la courbe
        fig = px.line(job_balance,
                    x="job",
                    y="balance",
                    title="üíº Solde bancaire moyen par m√©tier",
                    markers=True)

    
        fig.update_layout(
            xaxis_title="M√©tier",
            yaxis_title="Solde bancaire moyen (‚Ç¨)",
            template="plotly_dark",  
            height=500,
            width=900
        )

        
        st.plotly_chart(fig, use_container_width=True)

    
if show_bar:
    with col8:
        st.subheader("üìä R√©partition des classes par mois")

        # Comptage brut par mois
        ct = pd.crosstab(df['month'], df['class'])
        ct = ct.loc[df['month'].value_counts().index[::-1]]  # Tri

        # Remise en forme en long format
        ct_reset = ct.reset_index().melt(id_vars='month', var_name='class', value_name='count')


        # Trac√© avec plotly
        fig = px.bar(ct_reset, x='count', y='month', color='class',
                    orientation='h',
                    title="R√©partition des classes par mois (barres empil√©es)",
                    labels={'month': 'Mois', 'count': 'Nombre d‚Äôobservations'},
                    color_discrete_map=class_color
                    )

        fig.update_layout(template='plotly_dark',
                        barmode='stack',
                        height=500,
                        width=900)
        st.plotly_chart(fig, use_container_width=True)

   

st.markdown("""## Rapport d‚ÄôAnalyse Exploratoire : Optimisation des Campagnes Marketing pour D√©p√¥ts √† Terme

L'analyse s'est concentr√©e sur la r√©partition des clients dans trois classes cibles : **Engag√©**, **Non int√©ress√©**, et **Potentiel**. Nous avons explor√© la distribution de ces classes selon diverses dimensions, telles que la profession, le mois de l'ann√©e, le salaire, le nombre d'appels re√ßus, etc.

### 1. Analyse des Profils des Clients

#### 1.1 R√©partition des Classes par Profession

Les professions ont une influence significative sur l'engagement des clients :

* **Retrait√©s** et **√©tudiants** montrent une forte proportion de clients **engag√©s**. Cela pourrait √™tre d√ª √† une plus grande disponibilit√© ou √† une capacit√© √† prendre des d√©cisions financi√®res plus rapidement.
* Les **travailleurs ind√©pendants** (self-employed) sont √©galement une cible int√©ressante, avec un fort taux d‚Äôengagement malgr√© un faible taux de conversion potentiel.
* Les **ch√¥meurs** et **ouvriers** pr√©sentent une r√©partition plus √©quilibr√©e entre les classes, avec un l√©ger biais vers les **non int√©ress√©s**.

#### 1.2 R√©partition des Classes par Mois

* Le mois de **mai** ressort comme celui avec le plus grand nombre de clients **engag√©s**. Ce mois pourrait correspondre √† une p√©riode favorable pour les offres bancaires, probablement li√©e √† la gestion des finances personnelles au d√©but de l'ann√©e ou apr√®s les vacances.
* Les mois **ao√ªt** et **juillet** pr√©sentent des p√©riodes o√π les clients sont moins r√©ceptifs, avec une forte proportion de clients **non int√©ress√©s**. Ces mois peuvent correspondre √† une p√©riode de distraction estivale o√π l‚Äôattention des clients est ailleurs.

#### 1.3 Nombre de Jours Pr√©c√©dents par Classe

* **Les clients engag√©s** ont eu un nombre de jours beaucoup plus √©lev√© pr√©c√©dant l‚Äôoffre, sugg√©rant que ces clients ont un historique plus long avec la banque ou ont √©t√© sollicit√©s de mani√®re plus cibl√©e.
* **Les non int√©ress√©s** et **potentiels** montrent un nombre de jours plus faible, indiquant une r√©activit√© plus rapide, mais moins de suivi √† long terme.

#### 1.4 Nombre de Campagnes par Classe

* **Les clients engag√©s** ont √©t√© contact√©s par un plus grand nombre de campagnes. Cette donn√©e confirme l‚Äôid√©e que ces clients sont plus r√©ceptifs aux campagnes r√©p√©t√©es.
* Les **non int√©ress√©s** et **potentiels** ont re√ßu moins d'appels, ce qui peut indiquer qu'une segmentation plus fine est n√©cessaire pour ces groupes afin de maximiser l'engagement.

### 2. Facteurs Cl√©s Influents

#### 2.1 Solde bancaire Moyen par Classe

* Les clients **engag√©s** ont un solde moyen nettement plus √©lev√© (1,804.27 euros), ce qui pourrait √™tre un facteur cl√© pour leur capacit√© √† souscrire √† des produits financiers.
* En revanche, les **non int√©ress√©s** (1,236.54 euros) et **potentiels** (1,341.78 euros) ont des soldes moyens plus bas, ce qui peut indiquer que ces clients sont moins dispos√©s ou capables de souscrire √† des produits comme un d√©p√¥t √† terme.

#### 2.2 Nombre d‚ÄôAppels Moyens par Classe

* **Les clients engag√©s** re√ßoivent une quantit√© significative d'appels (en moyenne 96,813), ce qui sugg√®re qu'ils sont plus r√©ceptifs aux efforts marketing.
* **Les non int√©ress√©s** (28,518) et **potentiels** (15,068) sont moins sollicit√©s, mais peut-√™tre qu‚Äôune augmentation de ces appels pourrait les transformer en clients engag√©s.

#### 2.3 Dur√©e Moyenne des Appels

* Les **engag√©s** ont des appels plus longs (500.65 secondes en moyenne' soit 8 mnutes), ce qui sugg√®re qu‚Äôils sont plus ouverts √† la discussion et √† la r√©ception d'informations d√©taill√©es.
* **Les non int√©ress√©s** et **potentiels** ont des appels plus courts, ce qui peut indiquer un faible niveau d'int√©r√™t.

#### 2.4 R√©partition des Classes dans la Variable Cible

* La majorit√© des **clients engag√©s** (plus de 5000) fait partie de la variable cible, ce qui confirme que ce groupe est celui qui r√©agit le mieux aux offres de d√©p√¥t √† terme.
* Les **non int√©ress√©s** et **potentiels** ont des repr√©sentations plus faibles, mais ils restent des segments importants √† surveiller pour d'√©ventuelles strat√©gies de conversion.

### 3. Recommandations

#### 3.1 Ciblage des Profils Engag√©s

Les clients dans des professions comme **√©tudiants**, **retrait√©s**, et **travailleurs ind√©pendants** doivent √™tre prioris√©s dans les campagnes de marketing. Ces segments montrent une forte propension √† accepter des offres de d√©p√¥t √† terme.

#### 3.2 Optimisation des Efforts Marketing

Augmenter le nombre d‚Äôappels et la dur√©e des interactions avec les **non int√©ress√©s** et **potentiels**. Leurs soldes moyens plus bas sugg√®rent qu‚Äôils pourraient b√©n√©ficier de campagnes plus personnalis√©es et de messages adapt√©s √† leurs besoins sp√©cifiques.

#### 3.3 Planification des Campagnes

Concentrer les efforts pendant des mois comme **mai**, o√π les clients sont plus r√©ceptifs, et √©viter des p√©riodes comme **ao√ªt** et **juillet**, qui montrent une plus grande proportion de clients non int√©ress√©s.

#### 3.4 Am√©lioration de l‚ÄôApproche Par Canal

Les campagnes t√©l√©phoniques doivent √™tre renforc√©es pour les **engag√©s**, car ces clients semblent plus r√©ceptifs aux appels et aux informations d√©taill√©es. Il pourrait √™tre pertinent d‚Äôexplorer d‚Äôautres canaux (emails, notifications mobiles) pour les **potentiels**.

---

Cette analyse fournit des insights pr√©cieux pour am√©liorer le ciblage des campagnes marketing et maximiser l'efficacit√© des efforts bancaires. En utilisant ces r√©sultats, la banque pourra affiner ses strat√©gies et proposer des offres plus personnalis√©es, augmentant ainsi le taux de conversion des clients et r√©duisant les co√ªts li√©s aux campagnes inefficaces.

---

""")


